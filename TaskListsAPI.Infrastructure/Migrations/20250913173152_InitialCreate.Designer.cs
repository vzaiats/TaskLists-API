// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskListsAPI.Infrastructure.Database;

#nullable disable

namespace TaskListsAPI.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250913173152_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaskListsAPI.Domain.Entities.Share", b =>
                {
                    b.Property<Guid>("TaskCollectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("TaskCollectionId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Shares", (string)null);
                });

            modelBuilder.Entity("TaskListsAPI.Domain.Entities.TaskCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("TaskCollections", (string)null);
                });

            modelBuilder.Entity("TaskListsAPI.Domain.Entities.TaskItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TaskCollectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("TaskCollectionId");

                    b.ToTable("TaskItems", (string)null);
                });

            modelBuilder.Entity("TaskListsAPI.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("TaskListsAPI.Domain.Entities.Share", b =>
                {
                    b.HasOne("TaskListsAPI.Domain.Entities.TaskCollection", null)
                        .WithMany("Shares")
                        .HasForeignKey("TaskCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskListsAPI.Domain.Entities.User", null)
                        .WithMany("SharedCollections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskListsAPI.Domain.Entities.TaskCollection", b =>
                {
                    b.HasOne("TaskListsAPI.Domain.Entities.User", null)
                        .WithMany("OwnedCollections")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskListsAPI.Domain.Entities.TaskItem", b =>
                {
                    b.HasOne("TaskListsAPI.Domain.Entities.TaskCollection", null)
                        .WithMany("Tasks")
                        .HasForeignKey("TaskCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskListsAPI.Domain.Entities.TaskCollection", b =>
                {
                    b.Navigation("Shares");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TaskListsAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("OwnedCollections");

                    b.Navigation("SharedCollections");
                });
#pragma warning restore 612, 618
        }
    }
}
